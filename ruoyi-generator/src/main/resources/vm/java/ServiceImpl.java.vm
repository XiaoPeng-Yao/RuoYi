package ${package}.service.impl;

import java.util.List;

import com.ruoyi.common.core.page.ExampleUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import ${package}.mapper.${className}Mapper;
import ${package}.domain.${className};
import ${package}.service.I${className}Service;
import com.ruoyi.common.core.text.Convert;
import tk.mybatis.mapper.entity.Example;

/**
 * ${tableComment} 服务层实现
 *
 * @author ${author}
 * @date ${datetime}
 */
@Service
public class ${className}ServiceImpl implements I${className}Service
{
	@Autowired
	private ${className}Mapper ${classname}Mapper;

	/**
     * 查询${tableComment}信息
     *
     * @param ${primaryKey.attrname} ${tableComment}ID
     * @return ${tableComment}信息
     */
    @Override
	public ${className} select${className}ById(${primaryKey.attrType} ${primaryKey.attrname})
	{
	    return ${classname}Mapper.selectByPrimaryKey(${primaryKey.attrname});
	}

	/**
     * 查询${tableComment}列表
     *
     * @param ${classname} ${tableComment}信息
     * @return ${tableComment}集合
     */
	@Override
	public List<${className}> select${className}List(${className} ${classname})
	{
		Example example = new Example(${className}.class);
		Example.Criteria criteria = example.createCriteria();

#foreach ($column in $columns)
#if(${column.attrType} != "Date")
		ExampleUtils.andEqualTo(criteria, "${column.attrname}", ${classname}.get${column.attrName}());
#elseif(${column.attrType} == "Date")
		ExampleUtils.andBetweenDateToDate(criteria, "${column.attrname}", ${classname}.getParams().get("begin${column.attrName}"),${classname}.getParams().get("end${column.attrName}"));
#end
#end

	    return ${classname}Mapper.selectByExample(example);
	}

    /**
     * 新增${tableComment}
     *
     * @param ${classname} ${tableComment}信息
     * @return 结果
     */
	@Override
	public int insert${className}(${className} ${classname})
	{
	    return ${classname}Mapper.insertSelective(${classname});
	}

	/**
     * 修改${tableComment}
     *
     * @param ${classname} ${tableComment}信息
     * @return 结果
     */
	@Override
	public int update${className}(${className} ${classname})
	{
	    return ${classname}Mapper.updateByPrimaryKeySelective(${classname});
	}

	/**
     * 删除${tableComment}对象
     *
     * @param ids 需要删除的数据ID
     * @return 结果
     */
	@Override
	public int delete${className}ByIds(String ids)
	{
        Example example = new Example(${className}.class);
        Example.Criteria criteria = example.createCriteria();
        criteria.andIn("${primaryKey.attrname}",Convert.toList(ids));
		return ${classname}Mapper.deleteByExample(example);
	}


    /**
     * 删除${tableComment} 单条信息
	 * @param ${primaryKey.attrname} 删除的主键ID
     * @return
     */
    @Override
    public int delete${className}ById(${primaryKey.attrType} ${primaryKey.attrname}){
        return ${classname}Mapper.deleteByPrimaryKey(${primaryKey.attrname});
	}

}
