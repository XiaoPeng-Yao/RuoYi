package ${packageName}.mapper;

import java.util.List;
import ${packageName}.domain.${ClassName};
#if($table.sub)
import ${packageName}.domain.${subClassName};
#end

/**
 * ${functionName}Mapper接口
 * 
 * @author ${author}
 * @date ${datetime}
 */
public interface ${ClassName}Mapper 
{
    /**
     * 查询${functionName}
     * 
     * @param ${pkColumn.javaField} ${functionName}ID
     * @return ${functionName}
     */
    public ${ClassName} select${ClassName}ById(${pkColumn.javaType} ${pkColumn.javaField});

    #if($dspRepeatColumn)
        /**
         * 校验 ${functionName} 名称是否重复
         *
         * @param ${dspRepeatColumn.javaField}
         * @return ${functionName}
         */
        public ${ClassName} check${ClassName}Unique(String ${dspRepeatColumn.javaField});
    #end

    /**
     * 查询${functionName}列表
     * 
     * @param ${className} ${functionName}
     * @return ${functionName}集合
     */
    public List<${ClassName}> select${ClassName}List(${ClassName} ${className});

    /**
     * 新增${functionName}
     * 
     * @param ${className} ${functionName}
     * @return 结果
     */
    public int insert${ClassName}(${ClassName} ${className});

    /**
     * 修改${functionName}
     * 
     * @param ${className} ${functionName}
     * @return 结果
     */
    public int update${ClassName}(${ClassName} ${className});

    /**
     * 删除${functionName}
     * 
     * @param ${pkColumn.javaField} ${functionName}ID
     * @return 结果
     */
    public int delete${ClassName}ById(${pkColumn.javaType} ${pkColumn.javaField});

    /**
     * 批量删除${functionName}
     * 
     * @param ${pkColumn.javaField}s 需要删除的数据ID
     * @return 结果
     */
    public int delete${ClassName}ByIds(String[] ${pkColumn.javaField}s);
#if($table.sub)

    /**
     * 批量删除${subTable.functionName}
     * 
     * @param customerIds 需要删除的数据ID
     * @return 结果
     */
    public int delete${subClassName}By${subTableFkClassName}s(String[] ${pkColumn.javaField}s);
    
    /**
     * 批量新增${subTable.functionName}
     * 
     * @param ${subclassName}List ${subTable.functionName}列表
     * @return 结果
     */
    public int batch${subClassName}(List<${subClassName}> ${subclassName}List);
    

    /**
     * 通过${functionName}ID删除${subTable.functionName}信息
     * 
     * @param roleId 角色ID
     * @return 结果
     */
    public int delete${subClassName}By${subTableFkClassName}(${pkColumn.javaType} ${pkColumn.javaField});
#end

#if($table.tree)

    /**
     * 修改子元素关系
     *
     * @param ${className}s 子元素
     * @return 结果
     */
    public int update${ClassName}Children(@Param("${className}s") List<${ClassName}> ${className});


    /**
     * 根据ID查询所有子部门
     *
     * @param ${className}Id 部门ID
     * @return 部门列表
     */
    public List<${ClassName}> selectChildren${ClassName}ById(Long ${pkColumn.javaField});

    /**
     * 根据ID查询所有子部门（正常状态）
     *
     * @param ${pkColumn.javaField} 部门ID
     * @return 子部门数
     */
    public int selectNormalChildren${ClassName}ById(Long ${pkColumn.javaField});

    /**
     * 修改所在部门的父级部门状态
     *
     * @param ${className} 部门
     */
    public void update${ClassName}Status(${ClassName} ${className});

#end

}
