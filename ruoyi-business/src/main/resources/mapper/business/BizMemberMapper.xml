<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.business.mapper.BizMemberMapper">
    
    <resultMap type="BizMember" id="BizMemberResult">
        <result property="id"    column="id"    />
        <result property="mobile"    column="mobile"    />
        <result property="memberName"    column="member_name"    />
        <result property="password"    column="password"    />
        <result property="recommendId"    column="recommend_id"    />
        <result property="recommendMobile"    column="recommend_mobile"    />
        <result property="recommendName"    column="recommend_name"    />
        <result property="memberType"    column="member_type"    />
        <result property="specialLevel"    column="special_level"    />
        <result property="isDelete"    column="is_delete"    />
        <result property="isEnable"    column="is_enable"    />
        <result property="createBy"    column="create_by"    />
        <result property="createTime"    column="create_time"    />
        <result property="updateBy"    column="update_by"    />
        <result property="updateTime"    column="update_time"    />
    </resultMap>

    <sql id="selectBizMemberVo">
        select a.id, mobile, member_name, password, recommend_id, recommend_mobile, recommend_name, member_type, special_level, is_delete, is_enable, create_by, create_time, update_by, update_time,
        (select amount from biz_account where member_id = a.id and account_type = 0) douBalance,
        (select amount from biz_account where member_id = a.id and account_type = 1) douPerson,
        (select amount from biz_account where member_id = a.id and account_type = 2) douTeam,
        (select amount from biz_account where member_id = a.id and account_type = 3) douSpecial,
        (select amount from biz_account where member_id = a.id and account_type = 4) douField
        from biz_member a
    </sql>

    <sql id="selectBizMemberAllVo">
        select id, mobile, member_name, password, recommend_id, recommend_mobile, recommend_name, member_type, is_delete, is_enable, create_by, create_time, update_by, update_time
        from biz_member a
    </sql>

    <select id="selectBizMemberList" parameterType="BizMember" resultMap="BizMemberResult">
        <include refid="selectBizMemberVo"/>
        <where>
            <if test="memberName != null  and memberName != ''"> and (a.member_name like concat('%', #{memberName}, '%') or a.mobile like concat('%', #{memberName}, '%'))</if>
             and a.is_delete = 0
        </where>
        order by a.id desc
    </select>

    <select id="selectBizMemberAll" resultMap="BizMemberResult">
        <include refid="selectBizMemberAllVo"/>
    </select>
    
    <select id="selectBizMemberById" parameterType="Long" resultMap="BizMemberResult">
        <include refid="selectBizMemberVo"/>
        where a.id = #{id}
    </select>

    <select id="selectBizMemberDou" parameterType="java.util.Map" resultType="java.lang.Long">
        select amount from biz_account where member_id = #{memberID} and account_type = #{type}
    </select>

    <select id="selectBizMemberSimple" parameterType="Long" resultMap="BizMemberResult">
        select id, mobile, member_name, password, recommend_id, recommend_mobile, recommend_name, member_type, special_level, is_delete, is_enable, create_by, create_time, update_by, update_time
        from biz_member where id = #{id}
    </select>

    <select id="selectBizMemberByMobile" resultMap="BizMemberResult">
        select id, mobile, member_name, password, recommend_id, recommend_mobile, recommend_name, member_type, is_delete, is_enable, create_by, create_time, update_by, update_time
        from biz_member where mobile = #{mobile}
    </select>
        
    <insert id="insertBizMember" parameterType="BizMember" useGeneratedKeys="true" keyProperty="id">
        insert into biz_member
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="mobile != null and mobile != ''">mobile,</if>
            <if test="memberName != null and memberName != ''">member_name,</if>
            <if test="password != null and password != ''">password,</if>
            <if test="recommendId != null">recommend_id,</if>
            <if test="recommendAllId != null and recommendAllId != ''">recommend_all_id,</if>
            <if test="recommendMobile != null and recommendMobile != ''">recommend_mobile,</if>
            <if test="recommendName != null and recommendName != ''">recommend_name,</if>
            <if test="memberType != null">member_type,</if>
            <if test="isDelete != null">is_delete,</if>
            <if test="isEnable != null">is_enable,</if>
            <if test="createBy != null">create_by,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updateBy != null">update_by,</if>
            <if test="updateTime != null">update_time,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="mobile != null and mobile != ''">#{mobile},</if>
            <if test="memberName != null and memberName != ''">#{memberName},</if>
            <if test="password != null and password != ''">#{password},</if>
            <if test="recommendId != null">#{recommendId},</if>
            <if test="recommendAllId != null and recommendAllId != ''">#{recommendAllId},</if>
            <if test="recommendMobile != null and recommendMobile != ''">#{recommendMobile},</if>
            <if test="recommendName != null and recommendName != ''">#{recommendName},</if>
            <if test="memberType != null">#{memberType},</if>
            <if test="isDelete != null">#{isDelete},</if>
            <if test="isEnable != null">#{isEnable},</if>
            <if test="createBy != null">#{createBy},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updateBy != null">#{updateBy},</if>
            <if test="updateTime != null">#{updateTime},</if>
         </trim>
    </insert>

    <update id="updateBizMember" parameterType="BizMember">
        update biz_member
        <trim prefix="SET" suffixOverrides=",">
            <if test="mobile != null and mobile != ''">mobile = #{mobile},</if>
            <if test="memberName != null and memberName != ''">member_name = #{memberName},</if>
            <if test="password != null and password != ''">password = #{password},</if>
            <if test="recommendId != null">recommend_id = #{recommendId},</if>
            <if test="recommendAllId != null and recommendAllId != ''">recommend_all_id = #{recommendAllId},</if>
            <if test="recommendMobile != null and recommendMobile != ''">recommend_mobile = #{recommendMobile},</if>
            <if test="recommendName != null and recommendName != ''">recommend_name = #{recommendName},</if>
            <if test="memberType != null">member_type = #{memberType},</if>
            <if test="isDelete != null">is_delete = #{isDelete},</if>
            <if test="isEnable != null">is_enable = #{isEnable},</if>
            <if test="createBy != null">create_by = #{createBy},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="updateBy != null">update_by = #{updateBy},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteBizMemberById" parameterType="Long">
        delete from biz_member where id = #{id}
    </delete>

    <delete id="deleteBizMemberByIds" parameterType="String">
        update biz_member set is_delete = 1 where id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <select id="getValidChildCount" parameterType="Long" resultType="java.lang.Integer">
        select count(id) from biz_member a where recommend_id = #{memberID}
        and exists(select id from biz_order b where b.member_id = a.id and is_team = 1)
    </select>

    <select id="selectTeamData" parameterType="Map" resultType="java.util.Map">
        select a.id,a.mobile,a.member_name,a.recommend_id, sum(IF(c.product_count IS NULL,0,c.product_count)) as num from biz_member a
        left join biz_order b on a.id = b.member_id and b.order_status > 0 and b.is_team = 1
        left join biz_order_detail c on c.order_id = b.id
        <if test="productId != null">and c.product_id = #{productId}</if>
        where concat(',', recommend_all_id, ',') like concat('%,', #{memberID}, ',%')
        group by a.id,a.member_name,a.recommend_id
    </select>

    <select id="selectSpecialMember" parameterType="Integer" resultMap="BizMemberResult">
        select a.id, special_level, b.amount douSpecial from biz_member a
        left join biz_account b on a.id = b.member_id and b.account_type = 3
        where is_delete = 0 and b.amount >= #{minValue}
    </select>

    <select id="getMemberTeamCount" parameterType="Long" resultType="Long">
        select IF(sum(num) IS NULL,0,sum(num)) totalNum from (
        select a.id, sum(IF(c.product_count IS NULL,0,c.product_count)) as num from biz_member a
        left join biz_order b on a.id = b.member_id and b.order_status > 0 and b.is_team = 1
        left join biz_order_detail c on c.order_id = b.id
        where concat(',', recommend_all_id, ',') like concat('%,', #{memberID}, ',%')
        group by a.id
        ) t
    </select>

    <update id="updateMemberLevel" parameterType="BizMember">
        update biz_member
        set special_level = #{specialLevel}
        where id = #{id}
    </update>

    <select id="selectTeamBenefitMember" parameterType="Integer" resultType="Map">
        select id, totalNum from (
            select t1.id, IF(sum(num) IS NULL,0,sum(num)) totalNum from (
                select distinct(m1.id) from biz_member m1
                inner join biz_order o1 on m1.id = o1.member_id and o1.order_status > 0 and o1.is_team = 1
                where m1.is_delete = 0 and (select count(id) from biz_member m2 where m2.recommend_id=m1.id) >= 3
            ) t1
            inner join
            (
                select a.id, a.recommend_all_id, sum(IF(c.product_count IS NULL,0,c.product_count)) as num from biz_member a
                left join biz_order b on a.id = b.member_id and b.order_status > 0 and b.is_team = 1
                left join biz_order_detail c on c.order_id = b.id
                where a.is_delete = 0
                group by a.id
            ) t2 on concat(',', t2.recommend_all_id, ',') like concat('%', t1.id, '%') and t2.num > 0
            group by t1.id
        ) t3
        where totalNum > #{minValue}
        order by id
    </select>

    <select id="selectSubMember" parameterType="Long" resultType="Long">
        select id from biz_member where recommend_id = #{memberID}
    </select>
</mapper>