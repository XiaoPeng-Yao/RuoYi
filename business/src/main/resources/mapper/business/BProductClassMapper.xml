<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.business.mapper.BProductClassMapper">

    <resultMap type="BProductClass" id="BProductClassResult">
        <result property="id"    column="id"    />
        <result property="parentId"    column="parent_id"    />
        <result property="name"    column="name"    />
        <result property="classDescribe"    column="class_describe"    />
        <result property="additional"    column="additional"    />
        <result property="createTime"    column="create_time"    />
        <result property="updateTime"    column="update_time"    />
        <result property="parentName" column="parent_name" />
    </resultMap>

    <sql id="selectBProductClassVo">
        select * from b_product_class
    </sql>

    <select id="selectBProductClassList" parameterType="BProductClass" resultMap="BProductClassResult">
        <include refid="selectBProductClassVo"/>
        <where>
            <if test="parentId != null "> and parent_id = #{parentId}</if>
            <if test="name != null  and name != ''"> and name like concat('%', #{name}, '%')</if>
            <if test="classDescribe != null  and classDescribe != ''"> and class_describe = #{classDescribe}</if>
        </where>
        order by parent_id
    </select>

    <select id="selectBProductClassById" parameterType="Long" resultMap="BProductClassResult">
        select t.id, t.parent_id, t.name, t.class_describe, t.create_time, t.update_time,t.additional, p.name as parent_name
        from b_product_class t
        left join b_product_class p on p.id = t.parent_id
        where t.id = #{id}
    </select>

    <insert id="insertBProductClass" parameterType="BProductClass" useGeneratedKeys="true" keyProperty="id">
        insert into b_product_class
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="parentId != null">parent_id,</if>
            <if test="name != null">name,</if>
            <if test="classDescribe != null">class_describe,</if>
            <if test="additional != null">additional,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updateTime != null">update_time,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="parentId != null">#{parentId},</if>
            <if test="name != null">#{name},</if>
            <if test="classDescribe != null">#{classDescribe},</if>
            <if test="additional != null">#{additional},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updateTime != null">#{updateTime},</if>
         </trim>
    </insert>

    <update id="updateBProductClass" parameterType="BProductClass">
        update b_product_class
        <trim prefix="SET" suffixOverrides=",">
            <if test="parentId != null">parent_id = #{parentId},</if>
            <if test="name != null">name = #{name},</if>
            <if test="classDescribe != null">class_describe = #{classDescribe},</if>
            <if test="additional != null">additional = #{additional},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteBProductClassById" parameterType="Long">
        delete from b_product_class where id = #{id}
    </delete>

    <delete id="deleteBProductClassByIds" parameterType="String">
        delete from b_product_class where id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

</mapper>
